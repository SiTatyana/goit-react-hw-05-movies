{"version":3,"file":"static/js/672.1bc45aa2.chunk.js","mappings":"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","sources":["components/Review/Review.jsx","pages/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","servises/fetchApi.jsx"],"sourcesContent":["export const Review = ({review}) => {\n    const {author, content} = review;\n    return <>\n        <b><p>{\"Autor \"}<span>{author}</span></p></b>\n        <p>{content}</p>\n    </>\n}","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { Review } from \"components/Review/Review\";\nimport { api } from \"servises/fetchApi\";\n\nconst Reviews = ({isLoading}) => {\n    const {movieId} = useParams();\n    const [reviews, setReviews] = useState([]);\n    useEffect(() => {\n        isLoading(true);\n        api.getMovieReviews(movieId)\n        .then(data => {\n            if(!data.results.length){\n                return;\n            }\n            setReviews(data.results);\n        })\n        .catch(error => {\n            console.log(error);\n        })\n        .finally(() =>{\n            isLoading(false);\n        })\n    }, [movieId, isLoading]);\n    \n    return <>\n        {reviews.length > 0 ? \n        <ul>\n           {reviews.map(item => <li key={item.author}><Review review={item}/></li>)}\n        </ul>\n        : <p>Sorry, there are no reviews yet...</p>}\n    </>  \n}\n\nexport default Reviews;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import logo from \"noImage.png\";\n\nclass API_CONSTRUCTOR {\n    constructor(key = \"7cf73ae9a20e9f92c4fc22e4e8bf4150\"){\n        this.apiKey = key;\n        this.imageURL = \"https://image.tmdb.org/t/p/w500\";\n        this.allGenres = true;\n        this.genres = [];\n    }\n    async getTrendingMovies(page = 1){\n        try{\n            await this.getGenres();\n            const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${this.apiKey}&page=${page}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getSearchMovie(query){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${query}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieInfo(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieCredits(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                data.cast = this.showCasts(data.cast);\n                return data;\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieReviews(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return data;\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    showMovieInfo(data){\n        if(Array.isArray(data.results)){\n            data.results = data.results.map(item => {\n                item.poster_path = this.imageURL + item.poster_path;\n                item.backdrop_path = this.imageURL + item.backdrop_path;\n                item.genre_ids = this.showGenres(item.genre_ids);\n                return item;\n            })\n        }\n        else{\n            data.poster_path = this.imageURL + data.poster_path;\n            data.backdrop_path = this.imageURL + data.backdrop_path;\n            data.genre_ids = this.showGenres(data.genre_ids);\n        }\n        return data;\n    }\n    async getGenres(){\n        if(this.allGenres){\n            this.allGenres = !this.allGenres;\n            const URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${this.apiKey}`\n            const URL2 = `https://api.themoviedb.org/3/genre/tv/list?api_key=${this.apiKey}`\n            try{\n                const response = await fetch(URL);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genres.push(...data.genres);\n                }\n            }\n            catch(error){\n                console.error(\"Error in getGenres\")\n                console.log(error);\n            }\n            try{\n                const response = await fetch(URL2);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genres.push(...data.genres);\n                }\n            }\n            catch(error){\n                console.error(\"Error in getGenres\")\n                console.log(error);\n            }\n        }\n    }\n        showGenres(arr = []){\n        if(this.genres.length < 1){\n            return arr;\n        }\n        arr = arr.map((id) => this.genres.find(item => item.id === id).name);\n        return arr;\n    }\n    showCasts(arr = []){\n        arr = arr.map(item => {\n            if(!item.profile_path){\n                item.profile_path = logo;\n                return item;\n            }\n            item.profile_path = this.imageURL + item.profile_path;\n            return item\n        });\n        return arr\n    }\n}\n\nexport default API_CONSTRUCTOR;\nexport const api = new API_CONSTRUCTOR();"],"names":["Review","review","author","content","isLoading","movieId","useParams","useState","reviews","setReviews","useEffect","api","then","data","results","length","catch","error","console","log","finally","map","item","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","API_CONSTRUCTOR","apiKey","imageURL","allGenres","genres","page","getGenres","fetch","response","ok","json","showMovieInfo","query","id","cast","showCasts","Array","isArray","poster_path","backdrop_path","genre_ids","showGenres","URL","URL2","push","arr","find","name","profile_path","logo"],"sourceRoot":""}