{"version":3,"file":"static/js/752.5a5eb58d.chunk.js","mappings":"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","sources":["components/CastInfo/CastInfo.jsx","pages/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","servises/fetchApi.jsx"],"sourcesContent":["\n\nexport const CastInfo = ({cast}) =>{\n    const {character, profile_path, name} = cast;\n    return <div>\n        <div>\n            <img src={profile_path} width='200' alt={name} />\n        </div>\n        <p>{name}</p>\n        <p>{\"Character: \"}<span>{character}</span></p>\n    </div>\n}","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { CastInfo } from \"components/CastInfo/CastInfo\";\nimport { api } from \"servises/fetchApi\";\n\nconst Cast = ({isLoading}) => {\n    const {movieId} = useParams();\n    const [cast, setCast] = useState([]);\n    useEffect(() => {\n        isLoading(true)\n        api.getMovieCredits(movieId)\n        .then(data => {\n            setCast(data.cast)\n        })\n        .catch(error => {\n            console.log(error);\n        })\n        .finally(() => {\n            isLoading(false);\n        })\n    }, [movieId, isLoading]);\n    \n    return <>\n        {cast.length > 0 &&\n            <ul>\n                {cast.map((item, index) => <li key={item.id + index}><CastInfo cast={item}/></li>)}\n            </ul>\n            \n        }\n    </>  \n}\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import logo from \"noImage.png\";\n\nclass API_CONSTRUCTOR {\n    constructor(key = \"7cf73ae9a20e9f92c4fc22e4e8bf4150\"){\n        this.apiKey = key;\n        this.imageURL = \"https://image.tmdb.org/t/p/w500\";\n        this.allGenres = true;\n        this.genres = [];\n    }\n    async getTrendingMovies(page = 1){\n        try{\n            await this.getGenres();\n            const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${this.apiKey}&page=${page}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getSearchMovie(query){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${query}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieInfo(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieCredits(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                data.cast = this.showCasts(data.cast);\n                return data;\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieReviews(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return data;\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    showMovieInfo(data){\n        if(Array.isArray(data.results)){\n            data.results = data.results.map(item => {\n                item.poster_path = this.imageURL + item.poster_path;\n                item.backdrop_path = this.imageURL + item.backdrop_path;\n                item.genre_ids = this.showGenres(item.genre_ids);\n                return item;\n            })\n        }\n        else{\n            data.poster_path = this.imageURL + data.poster_path;\n            data.backdrop_path = this.imageURL + data.backdrop_path;\n            data.genre_ids = this.showGenres(data.genre_ids);\n        }\n        return data;\n    }\n    async getGenres(){\n        if(this.allGenres){\n            this.allGenres = !this.allGenres;\n            const URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${this.apiKey}`\n            const URL2 = `https://api.themoviedb.org/3/genre/tv/list?api_key=${this.apiKey}`\n            try{\n                const response = await fetch(URL);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genres.push(...data.genres);\n                }\n            }\n            catch(error){\n                console.error(\"Error in getGenres\")\n                console.log(error);\n            }\n            try{\n                const response = await fetch(URL2);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genres.push(...data.genres);\n                }\n            }\n            catch(error){\n                console.error(\"Error in getGenres\")\n                console.log(error);\n            }\n        }\n    }\n        showGenres(arr = []){\n        if(this.genres.length < 1){\n            return arr;\n        }\n        arr = arr.map((id) => this.genres.find(item => item.id === id).name);\n        return arr;\n    }\n    showCasts(arr = []){\n        arr = arr.map(item => {\n            if(!item.profile_path){\n                item.profile_path = logo;\n                return item;\n            }\n            item.profile_path = this.imageURL + item.profile_path;\n            return item\n        });\n        return arr\n    }\n}\n\nexport default API_CONSTRUCTOR;\nexport const api = new API_CONSTRUCTOR();"],"names":["CastInfo","cast","character","profile_path","name","src","width","alt","isLoading","movieId","useParams","useState","setCast","useEffect","api","then","data","catch","error","console","log","finally","length","map","item","index","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","API_CONSTRUCTOR","apiKey","imageURL","allGenres","genres","page","getGenres","fetch","response","ok","json","showMovieInfo","query","showCasts","Array","isArray","results","poster_path","backdrop_path","genre_ids","showGenres","URL","URL2","push","arr","find","logo"],"sourceRoot":""}