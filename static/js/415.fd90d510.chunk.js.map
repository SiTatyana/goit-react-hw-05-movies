{"version":3,"file":"static/js/415.fd90d510.chunk.js","mappings":"qMACaA,EAAW,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAmB,IAAbC,KAAAA,OAAa,MAAR,GAAQ,EACnCC,GAAWC,EAAAA,EAAAA,MACjB,OAAO,wBACFH,EAAKI,KAAI,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,GAAT,OAAiB,yBAAa,SAAC,KAAD,CAASC,GAAE,UAAKN,GAAL,OAAYK,GAAME,MAAO,CAACC,KAAMP,GAA3C,SAAuDG,KAA3DC,EAA1B,KAEjB,C,8ECsBD,UAxBa,SAAC,GAAiB,IAAhBI,EAAe,EAAfA,UACX,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,WACNJ,GAAU,GACVK,EAAAA,EAAAA,oBACCC,MAAK,SAAAC,GACFJ,EAAaI,EAAKC,QACrB,IACAC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EACf,IACAG,SAAQ,WACLb,GAAU,EACb,GACJ,GAAE,CAACA,KAEG,6BACH,4CACCE,EAAUY,OAAS,IAChB,SAAC,IAAD,CAAUxB,KAAMY,EAAWX,KAAM,cAG5C,C,mEC1BD,SAASwB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOd,GAEP,YADAQ,EAAOR,EAET,CACIa,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOlB,KAAKa,EAAOC,EAEvC,CACe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GACzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CACAf,OAAMgB,EACR,GACF,CACF,C,iDC3BMC,EAAAA,WACF,aAAsD,IAA1Cf,EAAyC,uDAAnC,oCAAmC,eACjDS,KAAKO,OAAShB,EACdS,KAAKQ,SAAW,kCAChBR,KAAKS,WAAY,EACjBT,KAAKU,OAAS,EACjB,CAiIA,OAjIA,sEACD,2GAAwBC,EAAxB,+BAA+B,EAA/B,kBAEcX,KAAKY,YAFnB,uBAG+BC,MAAM,2DAAD,OAA4Db,KAAKO,OAAjE,iBAAgFI,IAHpH,YAGcG,EAHd,QAIoBC,GAJpB,kCAK+BD,EAASE,OALxC,eAKkBvC,EALlB,yBAMmBuB,KAAKiB,cAAcxC,IANtC,0DAUQI,QAAQC,IAAR,MAVR,4GADC,IACD,yDAaA,WAAqBoC,GAArB,yFACUlB,KAAKY,YADf,gCAG+BC,MAAM,qDAAD,OAAsDb,KAAKO,OAA3D,kBAA2EW,IAH/G,YAGcJ,EAHd,QAIoBC,GAJpB,iCAK+BD,EAASE,OALxC,cAKkBvC,EALlB,yBAMmBuB,KAAKiB,cAAcxC,IANtC,0DAUQI,QAAQC,IAAR,MAVR,6GAbA,IAaA,uDAaA,WAAmBhB,GAAnB,yFACUkC,KAAKY,YADf,gCAG+BC,MAAM,sCAAD,OAAuC/C,EAAvC,oBAAqDkC,KAAKO,SAH9F,YAGcO,EAHd,QAIoBC,GAJpB,iCAK+BD,EAASE,OALxC,cAKkBvC,EALlB,yBAMmBuB,KAAKiB,cAAcxC,IANtC,0DAUQI,QAAQC,IAAR,MAVR,6GAbA,IAaA,0DAaA,WAAsBhB,GAAtB,yFACUkC,KAAKY,YADf,gCAG+BC,MAAM,sCAAD,OAAuC/C,EAAvC,4BAA6DkC,KAAKO,SAHtG,YAGcO,EAHd,QAIoBC,GAJpB,iCAK+BD,EAASE,OALxC,cAKkBvC,EALlB,QAMiB0C,KAAOnB,KAAKoB,UAAU3C,EAAK0C,MAN5C,kBAOmB1C,GAPnB,0DAWQI,QAAQC,IAAR,MAXR,6GAbA,IAaA,0DAcA,WAAsBhB,GAAtB,yFACUkC,KAAKY,YADf,gCAG+BC,MAAM,sCAAD,OAAuC/C,EAAvC,4BAA6DkC,KAAKO,SAHtG,YAGcO,EAHd,QAIoBC,GAJpB,iCAK+BD,EAASE,OALxC,cAKkBvC,EALlB,yBAMmBA,GANnB,0DAUQI,QAAQC,IAAR,MAVR,6GAdA,IAcA,2BAaA,SAAcL,GAAM,IAAD,OAcf,OAbG4C,MAAMC,QAAQ7C,EAAKC,SAClBD,EAAKC,QAAUD,EAAKC,QAAQd,KAAI,SAAA2D,GAI5B,OAHAA,EAAKC,YAAc,EAAKhB,SAAWe,EAAKC,YACxCD,EAAKE,cAAgB,EAAKjB,SAAWe,EAAKE,cAC1CF,EAAKG,UAAY,EAAKC,WAAWJ,EAAKG,WAC/BH,CACV,KAGD9C,EAAK+C,YAAcxB,KAAKQ,SAAW/B,EAAK+C,YACxC/C,EAAKgD,cAAgBzB,KAAKQ,SAAW/B,EAAKgD,cAC1ChD,EAAKiD,UAAY1B,KAAK2B,WAAWlD,EAAKiD,YAEnCjD,CACV,uDACD,sGACOuB,KAAKS,UADZ,wBAEQT,KAAKS,WAAaT,KAAKS,UACjBmB,EAHd,gEAG6E5B,KAAKO,QACpEsB,EAJd,6DAI2E7B,KAAKO,QAJhF,kBAMmCM,MAAMe,GANzC,YAMkBd,EANlB,QAOwBC,GAPxB,kCAQmCD,EAASE,OAR5C,QAQsBvC,EARtB,QASgB,EAAAuB,KAAKU,QAAOoB,KAAZ,gBAAoBrD,EAAKiC,SATzC,0DAaY7B,QAAQD,MAAM,sBACdC,QAAQC,IAAR,MAdZ,mCAiBmC+B,MAAMgB,GAjBzC,aAiBkBf,EAjBlB,QAkBwBC,GAlBxB,kCAmBmCD,EAASE,OAnB5C,QAmBsBvC,EAnBtB,QAoBgB,EAAAuB,KAAKU,QAAOoB,KAAZ,gBAAoBrD,EAAKiC,SApBzC,2DAwBY7B,QAAQD,MAAM,sBACdC,QAAQC,IAAR,MAzBZ,oHADC,IACD,wBA6BI,WAAqB,IAAD,OAATiD,EAAS,uDAAH,GACjB,OAAG/B,KAAKU,OAAO1B,OAAS,EACb+C,EAEXA,EAAMA,EAAInE,KAAI,SAACE,GAAD,OAAQ,EAAK4C,OAAOsB,MAAK,SAAAT,GAAI,OAAIA,EAAKzD,KAAOA,CAAhB,IAAoBmE,IAAjD,GAEjB,0BACD,WAAoB,IAAD,OAATF,EAAS,uDAAH,GASZ,OARAA,EAAMA,EAAInE,KAAI,SAAA2D,GACV,OAAIA,EAAKW,cAITX,EAAKW,aAAe,EAAK1B,SAAWe,EAAKW,aAClCX,IAJHA,EAAKW,aAAeC,EACbZ,EAId,GAEJ,OAvICjB,GA2IO/B,EAAM,IAAI+B,C","sources":["components/FilmList/FilmList.jsx","pages/Home.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","servises/fetchApi.jsx"],"sourcesContent":["import { NavLink, useLocation } from \"react-router-dom\";\nexport const FilmList = ({list, path=''}) => {\n    const location = useLocation();\n    return <ul>\n        {list.map(({title, id}) => <li key={id}><NavLink to={`${path}${id}`} state={{from: location}}>{title}</NavLink></li>)}\n    </ul>\n}","import { useState, useEffect } from \"react\";\nimport { FilmList } from \"components/FilmList/FilmList\";\nimport { api } from \"servises/fetchApi\";\n\nconst Home = ({isLoading}) => {\n    const [trendings, setTrendings] = useState([]);\n    useEffect(() => {\n        isLoading(true);\n        api.getTrendingMovies()\n        .then(data => {\n            setTrendings(data.results);\n        })\n        .catch(error => {\n            console.log(error);\n        })\n        .finally(() =>{\n            isLoading(false);\n        })\n    }, [isLoading]);\n\n    return <main>\n        <h1>Trendings today</h1>\n        {trendings.length > 0 && \n            <FilmList list={trendings} path={'movies/'}/>\n        }\n    </main>\n}\n\nexport default Home;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import logo from \"noImage.png\";\n\nclass API_CONSTRUCTOR {\n    constructor(key = \"7cf73ae9a20e9f92c4fc22e4e8bf4150\"){\n        this.apiKey = key;\n        this.imageURL = \"https://image.tmdb.org/t/p/w500\";\n        this.allGenres = true;\n        this.genres = [];\n    }\n    async getTrendingMovies(page = 1){\n        try{\n            await this.getGenres();\n            const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${this.apiKey}&page=${page}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getSearchMovie(query){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${query}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieInfo(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return this.showMovieInfo(data);\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieCredits(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                data.cast = this.showCasts(data.cast);\n                return data;\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    async getMovieReviews(id){\n        await this.getGenres();\n        try{\n            const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${this.apiKey}`);\n            if(response.ok){\n                const data = await response.json();\n                return data;\n            }\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n    showMovieInfo(data){\n        if(Array.isArray(data.results)){\n            data.results = data.results.map(item => {\n                item.poster_path = this.imageURL + item.poster_path;\n                item.backdrop_path = this.imageURL + item.backdrop_path;\n                item.genre_ids = this.showGenres(item.genre_ids);\n                return item;\n            })\n        }\n        else{\n            data.poster_path = this.imageURL + data.poster_path;\n            data.backdrop_path = this.imageURL + data.backdrop_path;\n            data.genre_ids = this.showGenres(data.genre_ids);\n        }\n        return data;\n    }\n    async getGenres(){\n        if(this.allGenres){\n            this.allGenres = !this.allGenres;\n            const URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${this.apiKey}`\n            const URL2 = `https://api.themoviedb.org/3/genre/tv/list?api_key=${this.apiKey}`\n            try{\n                const response = await fetch(URL);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genres.push(...data.genres);\n                }\n            }\n            catch(error){\n                console.error(\"Error in getGenres\")\n                console.log(error);\n            }\n            try{\n                const response = await fetch(URL2);\n                if(response.ok){\n                    const data = await response.json();\n                    this.genres.push(...data.genres);\n                }\n            }\n            catch(error){\n                console.error(\"Error in getGenres\")\n                console.log(error);\n            }\n        }\n    }\n        showGenres(arr = []){\n        if(this.genres.length < 1){\n            return arr;\n        }\n        arr = arr.map((id) => this.genres.find(item => item.id === id).name);\n        return arr;\n    }\n    showCasts(arr = []){\n        arr = arr.map(item => {\n            if(!item.profile_path){\n                item.profile_path = logo;\n                return item;\n            }\n            item.profile_path = this.imageURL + item.profile_path;\n            return item\n        });\n        return arr\n    }\n}\n\nexport default API_CONSTRUCTOR;\nexport const api = new API_CONSTRUCTOR();"],"names":["FilmList","list","path","location","useLocation","map","title","id","to","state","from","isLoading","useState","trendings","setTrendings","useEffect","api","then","data","results","catch","error","console","log","finally","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","API_CONSTRUCTOR","apiKey","imageURL","allGenres","genres","page","getGenres","fetch","response","ok","json","showMovieInfo","query","cast","showCasts","Array","isArray","item","poster_path","backdrop_path","genre_ids","showGenres","URL","URL2","push","arr","find","name","profile_path","logo"],"sourceRoot":""}